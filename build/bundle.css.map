{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "AxisX.svelte",
    "AxisY.svelte",
    "ColChart.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n\timport Map from './Map.svelte';\n\timport MapSource from './MapSource.svelte';\n\timport MapLayer from './MapLayer.svelte';\n\timport Panel from './Panel.svelte';\n\timport Select from './Select.svelte';\n\timport ColChart from './ColChart.svelte';\n\timport { getTopo, getData } from './utils.js';\n\t\n\tconst mapstyle = 'https://bothness.github.io/ons-basemaps/data/style-dark.json';\n\tconst topojson = {\n\t\turl: 'https://raw.githubusercontent.com/ONSvisual/topojson_boundaries/master/geogLA2019EW.json',\n\t\tlayer: 'la2019EW',\n\t\tid: 'AREACD'\n\t};\n\tconst vector = {\n\t\turl: 'https://cdn.ons.gov.uk/maptiles/t18/tiles/{z}/{x}/{y}.pbf',\n\t\tlayer: 'imddata2',\n\t\tid: 'lsoa11cd'\n\t}\n\tconst colors = ['#d0587e', '#da7b91', '#e39ca5', '#eabcb9', '#f0dccd', '#e6f5d0', '#bfe4ab', '#97d287', '#6cc064', '#37ae3f'];\n\tconst datasets = [\n\t\t{\n\t\t\tcode: 'lsoadata',\n\t\t\tsource: 'https://raw.githubusercontent.com/bothness/geo-data/main/csv/imd-decile-lsoa-2019.csv'\n\t\t},\n\t\t{\n\t\t\tcode: 'laddata',\n\t\t\tsource: 'https://raw.githubusercontent.com/bothness/geo-data/main/csv/imd-stats-lad-2019.csv'\n\t\t},\n\t\t{\n\t\t\tcode: 'ladtypes',\n\t\t\tsource: 'https://raw.githubusercontent.com/bothness/geo-data/main/csv/imd-types-lad-2019.csv'\n\t\t}\n\t];\n\tconst types = [\n\t\t{\n\t\t\tcode: 'flat',\n\t\t\tname: 'Flat',\n\t\t\tdescription: 'Districts with a more or less equal spread of deprivation levels, from highest to lowest, across its neighbourhoods.'\n\t\t},\n\t\t{\n\t\t\tcode: 'left',\n\t\t\tname: 'Skewed left',\n\t\t\tdescription: 'Districts with a greater proportion of deprived neighbourhoods.'\n\t\t},\n\t\t{\n\t\t\tcode: 'right',\n\t\t\tname: 'Skewed right',\n\t\t\tdescription: 'Districts with a lesser proportion of deprived neighbourhoods.'\n\t\t},\n\t\t{\n\t\t\tcode: 'nshape',\n\t\t\tname: 'N-shaped',\n\t\t\tdescription: 'Districts with more neighbourhoods towards the middle of the deprivation scale.'\n\t\t},\n\t\t{\n\t\t\tcode: 'ushape',\n\t\t\tname: 'U-shaped',\n\t\t\tdescription: 'Districts with more neighbourhoods towards the extremes of the deprivation scale.'\n\t\t}\n\t];\n\tconst means = [\n\t\t{\n\t\t\tcode: 'low20',\n\t\t\tname: 'Most deprived',\n\t\t\tdescription: 'The 20% of districts with the highest mean neighbourhood deprivation.'\n\t\t},\n\t\t{\n\t\t\tcode: 'high20',\n\t\t\tname: 'Least deprived',\n\t\t\tdescription: 'The 20% of districts with the lowest mean neighbourhood deprivation.'\n\t\t}\n\t];\n\t\n\tlet data = {\n\t\tgeojson: null,\n\t\tlsoadata: null,\n\t\tladdata: null,\n\t\tladtypes: null,\n\t\tladlookup: null,\n\t\ttypecodes: {},\n\t\tmeancodes: {}\n\t};\n\t\n\tlet highlight = {\n\t\thovered: null,\n\t\tselected: null,\n\t\tmulti: null,\n\t\ttype: null,\n\t\tmean: null\n\t};\n\t\n\t// Load topojson data to geojson object\n\tgetTopo(topojson.url, topojson.layer)\n\t.then(result => {\n\t\t// Filter for only English LADs\n\t\tlet features = result.features.filter(f => f.properties[topojson.id].substr(0,1) == 'E');\n\t\tdata.geojson = result;\n\t\tdata.geojson.features = features;\n\t});\n\t\n\t// Load data\n\tfor (let i in datasets) {\n\t\tgetData(datasets[i].source)\n\t\t.then(result => {\n\t\t\tdata[datasets[i].code] = result;\n\t\t\treturn result;\n\t\t})\n\t\t.then(result => {\n\t\t\tif (datasets[i].code == 'laddata') {\n\t\t\t\t// Get codes for each typology\n\t\t\t\tfor (let i in types) {\n\t\t\t\t\tdata.typecodes[types[i].code] = result.filter(d => d.type == types[i].code).map(d => d.code);\n\t\t\t\t}\n\n\t\t\t\t// Get codes for most and least deprived areas\n\t\t\t\tlet sorted = [...result];\n\t\t\t\tsorted = sorted.sort((a, b) => a.mean - b.mean).map(d => d.code);\n\t\t\t\tdata.meancodes['low20'] = sorted.slice(0, Math.floor(sorted.length * 0.2));\n\t\t\t\tdata.meancodes['high20'] = sorted.slice(Math.floor(sorted.length * 0.8), sorted.length);\n\t\t\t\tconsole.log(data.meancodes);\n\n\t\t\t\t// Duplicate data in indexed lookup format\n\t\t\t\tlet lookup = {};\n\t\t\t\tfor (let i in result) {\n\t\t\t\t\tlookup[result[i].code] = result[i];\n\t\t\t\t}\n\t\t\t\tdata.ladlookup = lookup;\n\t\t\t} else if (datasets[i].code == 'ladtypes') {\n\t\t\t\tlet lookup = {};\n\t\t\t\tfor (let i in result) {\n\t\t\t\t\tresult[i].description = result[i].code ? types.filter(d => d.code == result[i].code)[0].description : null;\n\t\t\t\t\tlookup[result[i].code] = result[i];\n\t\t\t\t}\n\t\t\t\tdata[datasets[i].code] = lookup;\n\t\t\t}\n\t\t});\n\t}\n\t\n\tfunction selectType() {\n\t\thighlight.multi = highlight.type ? data.typecodes[highlight.type] : [];\n\t\thighlight.mean = null;\n\t\thighlight.selected = null;\n\t}\n\n\tfunction selectMean() {\n\t\thighlight.multi = highlight.mean ? data.meancodes[highlight.mean] : [];\n\t\thighlight.type = null;\n\t\thighlight.selected = null;\n\t}\n</script>\n\n<style>\n\t:global(body) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbackground-color: #111;\n\t\tcolor: #bbb;\n\t}\n\t:global(h1, h2) {\n\t\tcolor: #eee;\n\t}\n\tmain {\n\t\tpadding: 30px;\n\t}\n\tselect {\n\t\twidth: 250px;\n\t}\n\t.right {\n\t\tfloat: right;\n\t}\n</style>\n\n<Panel>\n\t<main>\n\t\t<h1>Deprivation Analysis</h1>\n\t\t{#if data.laddata}\n\t\t<!-- svelte-ignore a11y-no-onchange -->\n\t\t<select bind:value={highlight.type} on:change={selectType} >\n\t\t\t<option value={null}>\n\t\t\t\tSelect by distribution\n\t\t\t</option>\n\t\t\t{#each types as type}\n\t\t\t<option value={type.code}>\n\t\t\t\t{type.name}\n\t\t\t</option>\n\t\t\t{/each}\n\t\t</select><br />\n\t\t<!-- svelte-ignore a11y-no-onchange -->\n\t\t<select bind:value={highlight.mean} on:change={selectMean} >\n\t\t\t<option value={null}>\n\t\t\t\tSelect by deprivation\n\t\t\t</option>\n\t\t\t{#each means as mean}\n\t\t\t<option value={mean.code}>\n\t\t\t\t{mean.name}\n\t\t\t</option>\n\t\t\t{/each}\n\t\t</select><br />\n\t\t<!-- svelte-ignore a11y-no-onchange -->\n\t\t<select bind:value={highlight.selected} >\n\t\t\t<option value={null}>\n\t\t\t\tSelect district\n\t\t\t</option>\n\t\t\t{#each data.laddata.sort((a, b) => a.name.localeCompare(b.name)) as lad}\n\t\t\t<option value={lad.code}>\n\t\t\t\t{lad.name}\n\t\t\t</option>\n\t\t\t{/each}\n\t\t</select>\n\t\t{/if}\n\t\t{#if highlight.selected && data.ladlookup}\n\t\t<h2>{data.ladlookup[highlight.selected].name}</h2>\n\t\t<ColChart data=\"{[\n\t\t\t{decile: '1', value: data.ladlookup[highlight.selected]['1'], color: colors[0]},\n\t\t\t{decile: '2', value: data.ladlookup[highlight.selected]['2'], color: colors[1]},\n\t\t\t{decile: '3', value: data.ladlookup[highlight.selected]['3'], color: colors[2]},\n\t\t\t{decile: '4', value: data.ladlookup[highlight.selected]['4'], color: colors[3]},\n\t\t\t{decile: '5', value: data.ladlookup[highlight.selected]['5'], color: colors[4]},\n\t\t\t{decile: '6', value: data.ladlookup[highlight.selected]['6'], color: colors[5]},\n\t\t\t{decile: '7', value: data.ladlookup[highlight.selected]['7'], color: colors[6]},\n\t\t\t{decile: '8', value: data.ladlookup[highlight.selected]['8'], color: colors[7]},\n\t\t\t{decile: '9', value: data.ladlookup[highlight.selected]['9'], color: colors[8]},\n\t\t\t{decile: '10', value: data.ladlookup[highlight.selected]['10'], color: colors[9]}\n\t\t]}\" yMax={30} />\n\t\t<div>\n\t\t\t<small>&larr; More deprived</small>\n\t\t\t<small class=\"right\">Less deprived &rarr;</small>\n\t\t</div>\n\t\t<p><small>\n\t\t\tType: <strong>{data.ladtypes[data.ladlookup[highlight.selected].type].name}</strong>&nbsp;&nbsp;\n\t\t\tMean: <strong>{data.ladlookup[highlight.selected].mean.toFixed(2)}</strong>&nbsp;&nbsp;\n\t\t\tStd Dev: <strong>{data.ladlookup[highlight.selected].sdev.toFixed(2)}</strong></small></p>\n\t\t{:else if highlight.type && data.ladtypes}\n\t\t<h2>{data.ladtypes[highlight.type].name}</h2>\n\t\t<p>{data.ladtypes[highlight.type].description}</p>\n\t\t<ColChart data=\"{[\n\t\t\t{decile: '1', value: data.ladtypes[highlight.type]['1'], color: colors[0]},\n\t\t\t{decile: '2', value: data.ladtypes[highlight.type]['2'], color: colors[1]},\n\t\t\t{decile: '3', value: data.ladtypes[highlight.type]['3'], color: colors[2]},\n\t\t\t{decile: '4', value: data.ladtypes[highlight.type]['4'], color: colors[3]},\n\t\t\t{decile: '5', value: data.ladtypes[highlight.type]['5'], color: colors[4]},\n\t\t\t{decile: '6', value: data.ladtypes[highlight.type]['6'], color: colors[5]},\n\t\t\t{decile: '7', value: data.ladtypes[highlight.type]['7'], color: colors[6]},\n\t\t\t{decile: '8', value: data.ladtypes[highlight.type]['8'], color: colors[7]},\n\t\t\t{decile: '9', value: data.ladtypes[highlight.type]['9'], color: colors[8]},\n\t\t\t{decile: '10', value: data.ladtypes[highlight.type]['10'], color: colors[9]}\n\t\t]}\" yMax={30} />\n\t\t<div>\n\t\t\t<small>&larr; More deprived</small>\n\t\t\t<small class=\"right\">Less deprived &rarr;</small>\n\t\t</div>\n\t\t{:else if highlight.mean}\n\t\t<h2>{means.filter(d => d.code == highlight.mean)[0].name}</h2>\n\t\t<p>{means.filter(d => d.code == highlight.mean)[0].description}</p>\n\t\t{/if}\n\t\t<p><small>Data derived from the 2019 Index of Multiple Deprivation for LSOAs in England.</small></p>\n\t</main>\n</Panel>\n\n<Map style={mapstyle} minzoom={5} maxzoom={13}>\n\t{#if data.geojson}\n\t<MapSource id=\"lad\" type=\"geojson\" data={data.geojson} promoteId={topojson.id}>\n\t\t<MapLayer id=\"fill\" source=\"lad\" type=\"fill\" bind:hovered={highlight.hovered} bind:selected={highlight.selected} paint=\"{{'fill-color': 'rgba(255, 255, 255, 0)'}}\" click={true} hover={true} />\n\t\t<MapLayer id=\"line\" source=\"lad\" type=\"line\" highlight={true} highlighted={highlight.multi} paint=\"{{\n\t\t\t'line-color': ['case',\n\t\t\t\t['==', ['feature-state','selected'], true], 'orange',\n\t\t\t\t['==', ['feature-state','hovered'], true], 'rgb(192, 192, 192)',\n\t\t\t\t['==', ['feature-state','highlighted'], true], 'rgb(128, 192, 192)',\n\t\t\t\t'rgb(128, 128, 128)'\n\t\t\t],\n\t\t\t'line-width': ['case',\n\t\t\t\t['==', ['feature-state','selected'], true], 2,\n\t\t\t\t['==', ['feature-state','hovered'], true], 1.5,\n\t\t\t\t['==', ['feature-state','highlighted'], true], 1,\n\t\t\t\t0.3\n\t\t\t]\n\t\t}}\" />\n\t\t<MapLayer id=\"mask\" source=\"lad\" type=\"fill\" paint=\"{{\n\t\t\t'fill-color': ['case',\n\t\t\t\t['==', ['feature-state','selected'], true], 'rgba(0, 0, 0, 0)',\n\t\t\t\t['==', ['feature-state','hovered'], true], 'rgba(0, 0, 0, 0)',\n\t\t\t\t['==', ['feature-state','highlighted'], true], 'rgba(0, 0, 0, 0.5)',\n\t\t\t\t'rgba(72, 72, 72, 0.5)'\n\t\t\t]\n\t\t}}\" order=\"aeroway-taxiway\" />\n\t</MapSource>\n\t{/if}\n\t{#if data.lsoadata}\n\t<MapSource id=\"lsoa\" type=\"vector\" url={vector.url} layer={vector.layer} promoteId={vector.id} minzoom={5} >\n\t\t<MapLayer id=\"lsoa\" source=\"lsoa\" sourceLayer={vector.layer} data={data.lsoadata} type=\"fill\" paint=\"{{\n\t\t\t'fill-color': ['case',\n\t\t\t\t['!=', ['feature-state','color'], null], ['feature-state','color'],\n\t\t\t\t'rgba(255, 255, 255, 0)'\n\t\t\t]\n\t\t}}\" {colors} order=\"building\" />\n\t</MapSource>\n\t{/if}\n</Map>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\t$yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line\n\t\t\t\t\tx2='100%'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n\t\t\t>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t}\n\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n</style>",
    "<script>\n\t// \tNote: Due to REPL limitations, full responsiveness may not work here. Download the example from here or from the website (https://layercake.graphics/example/Column) and run locally to get all features.\n\t\n\timport { LayerCake, Svg, Html } from 'layercake';\n\timport { scaleBand } from 'd3-scale';\n\n\timport Column from './Column.svelte';\n\timport AxisX from './AxisX.svelte';\n\timport AxisY from './AxisY.svelte';\n\n\texport let data;\n\texport let yMax = null;\n\texport let yMin = 0;\n\texport let selected = null;\n\t\n\t$: yMin = yMin > 0 ? 0 : yMin;\n\n\tconst xKey = 'decile';\n\tconst yKey = 'value';\n\t\n\tlet xDomain = [];\n\n\tdata.forEach(d => {\n\t\txDomain.push(d[xKey]);\n\t\td[yKey] = +d[yKey];\n\t});\n</script>\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tmargin-top: 35px;\n\t}\n</style>\n\n<div class=\"chart-container\">\n\t<LayerCake\n\t\tpadding={{ top: 0, right: 0, bottom: 20, left: 30 }}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\txScale={scaleBand()}\n\t  xDomain={xDomain}\n\t\tyDomain={[yMin, yMax]}\n\t\tdata={data}\n\t>\n\t\t<Svg>\n\t\t\t<Column\n\t\t\t\t{selected}\n\t\t\t/><AxisX\n\t\t\t\tgridlines={false}\n\t\t\t/>\n\t\t\t<AxisY\n\t\t\t\tticks={4}\n\t\t\t\tformatTick=\"{d => d + '%'}\"\n\t\t\t/>\n\t\t</Svg>\n\t</LayerCake>\n</div>",
    "<script>\n\timport { onMount, setContext } from 'svelte';\n\timport mapbox from 'mapbox-gl';\n\n\texport let location = {\n\t\tbounds: [[-5.816, 49.864], [1.863, 55.872]] // England & Wales bounding box\n\t};\n\texport let style;\n\texport let minzoom = 0;\n\texport let maxzoom = 14;\n\t\n\tlet map;\n\tlet container;\n\tlet options;\n\t\n\tsetContext('map', {\n\t\tgetMap: () => map\n\t});\n\t\n\tif (location.bounds) {\n\t\toptions = { bounds: location.bounds };\n\t} else if (location.lon && location.lat) {\n\t\toptions = {\n\t\t\tcenter: [location.lon, location.lat]\n\t\t}\n\t\tif (location.zoom) {\n\t\t\toptions.zoom = location.zoom;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = 'https://unpkg.com/mapbox-gl/dist/mapbox-gl.css';\n\n\t\tlink.onload = () => {\n\t\t\tmap = new mapbox.Map({\n\t\t\t\tcontainer,\n\t\t\t\tstyle: style,\n\t\t\t\tminZoom: minzoom,\n\t\t\t\tmaxZoom: maxzoom,\n\t\t\t\t...options\n\t\t\t});\n\t\t};\n\n\t\tdocument.head.appendChild(link);\n\n\t\treturn () => {\n\t\t\tmap.remove();\n\t\t\tlink.parentNode.removeChild(link);\n\t\t};\n\t});\n</script>\n\n<style>\n\tdiv {\n\t\twidth: 60%;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tright: 0;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\theight: 70%;\n\t\t\tposition: absolute;\n\t\t}\n\t}\n</style>\n\n<div bind:this={container}>\n\t{#if map}\n\t\t<slot></slot>\n\t{/if}\n</div>",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 70%;\n\t\t}\n\t}\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AA2TC,kCAAoB,CACpB,kCAAoB,CAAC,AAAQ,CAAC,AAAE,CAAC,AAChC,UAAU,CAAE,UAAU,AACvB,CAAC,AACD,oBAAoB,cAAC,CAAC,AACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;AC3SD,kBAAG,CACH,IAAI,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,AACR,CAAC;ACED,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,OAAO,AAClB,CAAC,AACD,iBAAG,CAAC,AAAQ,CAAC,AAAE,CAAC,AACf,aAAa,CAAE,kBAAkB,AAClC,CAAC;ACPD,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,OAAO,AAClB,CAAC;ACsHO,IAAI,AAAE,CAAC,AACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,gBAAgB,CAAE,IAAI,CACtB,KAAK,CAAE,IAAI,AACZ,CAAC,AACO,MAAM,AAAE,CAAC,AAChB,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,IAAI,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACd,CAAC,AACD,MAAM,cAAC,CAAC,AACP,KAAK,CAAE,KAAK,AACb,CAAC,AACD,MAAM,cAAC,CAAC,AACP,KAAK,CAAE,KAAK,AACb,CAAC;ACpHD,KAAK,8BAAC,CAAC,AACN,SAAS,CAAE,MAAM,AAClB,CAAC,AAED,kCAAI,CACJ,oBAAK,CAAC,IAAI,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,CAAC,AACpB,CAAC,AAED,oBAAK,CAAC,IAAI,eAAC,CAAC,AACX,IAAI,CAAE,IAAI,AACX,CAAC,AAED,SAAS,8BAAC,CAAC,AACV,gBAAgB,CAAE,CAAC,AACpB,CAAC;AC3BD,KAAK,8BAAC,CAAC,AACN,SAAS,CAAE,MAAM,AAClB,CAAC,AAED,oBAAK,CAAC,IAAI,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,CAAC,AACpB,CAAC,AAED,oBAAK,CAAC,IAAI,eAAC,CAAC,AACX,IAAI,CAAE,IAAI,AACX,CAAC,AAED,KAAK,sBAAO,CAAC,IAAI,eAAC,CAAC,AAClB,gBAAgB,CAAE,CAAC,AACpB,CAAC;AC9BD,gBAAgB,eAAC,CAAC,AACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,IAAI,AACjB,CAAC;ACsBD,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACT,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACF,CAAC;AClED,GAAG,cAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}